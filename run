#!/usr/bin/env python3

from uuid import uuid4

from flask import Flask, request, jsonify, json
from flask_cors import CORS
from solver_service import SolverService
from solvers.exception import InvalidEquationError, MissingSolutionError, InvalidEquationTypeError

app = Flask(__name__)
CORS(app)

solver_service = SolverService()


@app.route('/solve/<type>', methods=['POST'])
def solve_equation(type: str):
    data = request.get_json()
    try:
        equation = solver_service.parse_equation(type, data)
        equation_id = str(uuid4())
        solver_service.solve_and_store(type, equation_id, equation)
        return jsonify({'id': equation_id}), 200
    except InvalidEquationTypeError:
        return jsonify({'message': 'invalid equation type received'}), 500
    except InvalidEquationError:
        return jsonify({'message': 'invalid equation parameters received'}), 500


@app.route('/solutions', methods=['GET'])
def get_all_solutions():
    return jsonify(solver_service.get_all_solutions()), 200


@app.route('/solutions/<id>', methods=['GET'])
def get_solution_by_id(id: str):
    try:
        return jsonify(solver_service.get_by_id(id)), 200
    except MissingSolutionError:
        return jsonify({'message': 'solution with id %s does not exist' % id}), 500


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
